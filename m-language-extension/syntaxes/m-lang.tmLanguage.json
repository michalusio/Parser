{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "M-Lang",
	"patterns": [{ "include": "#functionDeclaration" }, { "include": "#objectDeclaration" }, { "include": "#expression" }],
	"repository": {
		"expression": {
      "patterns": [
				{ "include": "#keywords" },
				{ "include": "#booleanLiteral" },
				{ "include": "#strings" },
				{ "include": "#paren-expression" },
				{ "include": "#bracket-expression" },
				{ "include": "#comment"},
				{ "include": "#commentBlock"},
				{ "include": "#let" },
				{ "include": "#words" }
			]
    },
		"words": {
			"name": "support.type.property-name.m-lang",
			"match": "\\w"
		},
		"let": {
			"begin": "(\\w+) (\\w+) *(?=.*;)(?!{)",
			"end": ";",
			"beginCaptures": {
				"1": { "name": "entity.name.type.m-lang" },
				"2": { "name": "entity.name.tag.m-lang" }
			},
			"patterns": [{"include": "#expression"}]
		},
		"objectDeclaration": {
			"begin": "(\\w+) (\\w+) *{",
			"end": "}",
			"beginCaptures": {
				"1": { "name": "entity.name.tag.m-lang" },
				"2": { "name": "entity.name.type.m-lang" }
			},
			"patterns": [{"include": "#expression"}]
		},
		"functionDeclaration": {
			"begin": "(\\w+) (\\w+)\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": { "name": "meta.return-type.m-lang entity.name.type.m-lang" },
				"2": { "name": "entity.name.function.m-lang" }
			},
			"patterns": [{"include": "#functionParams"}]
		},
		"functionParams": {
			"begin": "",
			"end": ",? *(\\w+) (\\w+) *",
			"beginCaptures": {
				"1": { "name": "meta.return-type.m-lang entity.name.type.m-lang" },
				"2": { "name": "support.type.property-name.m-lang" }
			},
			"endCaptures": {
				"1": { "name": "meta.return-type.m-lang entity.name.type.m-lang" },
				"2": { "name": "support.type.property-name.m-lang" }
			},
			"patterns": [{"include": "#functionParams"}]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.m-lang",
					"match": "\\b(if|else|import)\\b"
				},
				{
					"name": "constant.numeric.m-lang",
					"match": "\\b\\d\\b"
				},
				{
					"name": "keyword.operator.m-lang",
					"match": "\\b(\\+|-|\\*|\\/)\\b"
				}
			]
		},
		"booleanLiteral": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.m-lang",
					"match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
				},
				{
					"name": "constant.language.boolean.false.m-lang",
					"match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
				}
			]
		},
		"paren-expression": {
		  "begin": "\\(",
		  "end": "\\)",
		  "beginCaptures": {
				"0": { "name": "punctuation.paren.open.m-lang" }
		  },
		  "endCaptures": {
				"0": { "name": "punctuation.paren.close.m-lang" }
		  },
		  "name": "expression.group.m-lang",
		  "patterns": [{ "include": "#expression" }]
		},
		"bracket-expression": {
		  "begin": "{",
		  "end": "}",
		  "beginCaptures": {
				"0": { "name": "punctuation.brack.open.m-lang" }
		  },
		  "endCaptures": {
				"0": { "name": "punctuation.brack.close.m-lang" }
		  },
		  "name": "expression.group.m-lang",
		  "patterns": [{ "include": "#expression" }]
		},
		"strings": {
			"name": "string.quoted.double.m-lang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.m-lang",
					"match": "\\\\."
				}
			]
		},
		"comment": {
			"name": "comment.line.double-slash.m-lang",
			"match": "//.*$"
		},
		"commentBlock": {
			"name": "comment.block.m-lang",
			"begin": "/\\*",
			"end": "\\*/"
		}
	},
	"scopeName": "source.mlang"
}